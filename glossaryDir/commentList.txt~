simulate.sh 
-setArg.sh -pullS.sh -cleanUp.sh -setup.sh -determineStrengths.sh -addStrengthError.sh -runPPSSElegant.sh -runPPSSPseudoinverse.sh

setup.sh 
-unitCircle.sh -floquet.sh

determineStrengths.sh 
-dxprimeCalculations.java

addStrengthError.sh 
-modifyQuadStrength.java

runPPSSElegant.sh 
-ppss -elegantFunction.sh

runPPSSPseudoinverse.sh 
-ppss -parallelPseudoinverse.sh -cutLineOffTopOrBottom.sh

unitCircle.sh 
-makeCircle.gnuplot

floquet.sh 

makeCircle.gnuplot 

dxprimeCalculations.java 

modifyQuadStrength.java 

ppss 

elegantFunction.sh 
-modifyCorrector.pl -modifyElegant.sh

modifyCorrector.pl 

modifyElegant.sh 

parallelPseudoinverse.sh 
-formatEllipses.sh -determineTransformationMatrix.py

cutLineOffTopOrBottom.sh 

formatEllipses.sh 

determineTransformationMatrix.py 

#* Description: Used to check whether a variable has been explicitly set from the command line, or should be set to a specified default value
#* Argument: $1 - stringToFind - Variable identifier, used to determine which string to search for
#* Argument: $2 - defaultValue - Value to return if stringToFind is not found in the given arguments
#* Argument: $3+ - argv - Command line arguments which are parsed to find stringToFind
#* Example: set N = `$FPATH/setArg.sh N 10 $argv`
#* Further Comments: Variables passed in from the command line should take the form: ./scriptName.sh variableOneName=valueOne, variableTwoName=valueTwo,;
#* Further Comments: The comma is necessary for parsing, and is needed after every value, even the last one
